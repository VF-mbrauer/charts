apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    meta.helm.sh/release-name: metrics
    meta.helm.sh/release-namespace: nsxi-platform
  labels:
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-6.5.5
    vmware/version: 3.2.1-1.0-20138956
  name: metrics-postgresql-ha-postgresql
  namespace: nsxi-platform
spec:
  podManagementPolicy: Parallel
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: postgresql
      app.kubernetes.io/instance: metrics
      app.kubernetes.io/name: postgresql-ha
  serviceName: metrics-postgresql-ha-postgresql-headless
  template:
    metadata:
      labels:
        allow-traffic-to-dns: "true"
        app.kubernetes.io/component: postgresql
        app.kubernetes.io/instance: metrics
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql-ha
        helm.sh/chart: postgresql-ha-6.5.5
        vmware/version: 3.2.1-1.0-20138956
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: postgresql
                    app.kubernetes.io/instance: metrics
                    app.kubernetes.io/name: postgresql-ha
                namespaces:
                  - nsxi-platform
                topologyKey: kubernetes.io/hostname
              weight: 1
      containers:
        - env:
            - name: BITNAMI_DEBUG
              value: "true"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: metrics-postgresql-password
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "true"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit, repmgr
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: "256"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: REPMGR_UPGRADE_EXTENSION
              value: "no"
            - name: REPMGR_PGHBA_TRUST_ALL
              value: "no"
            - name: REPMGR_MOUNTED_CONF_DIR
              value: /build/repmgr/conf
            - name: REPMGR_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPMGR_PARTNER_NODES
              value: metrics-postgresql-ha-postgresql-0.metrics-postgresql-ha-postgresql-headless.$(REPMGR_NAMESPACE).svc.cluster.local,metrics-postgresql-ha-postgresql-1.metrics-postgresql-ha-postgresql-headless.$(REPMGR_NAMESPACE).svc.cluster.local,metrics-postgresql-ha-postgresql-2.metrics-postgresql-ha-postgresql-headless.$(REPMGR_NAMESPACE).svc.cluster.local,
            - name: REPMGR_PRIMARY_HOST
              value: metrics-postgresql-ha-postgresql-0.metrics-postgresql-ha-postgresql-headless.$(REPMGR_NAMESPACE).svc.cluster.local
            - name: REPMGR_NODE_NAME
              value: $(MY_POD_NAME)
            - name: REPMGR_NODE_NETWORK_NAME
              value: $(MY_POD_NAME).metrics-postgresql-ha-postgresql-headless.$(REPMGR_NAMESPACE).svc.cluster.local
            - name: REPMGR_LOG_LEVEL
              value: NOTICE
            - name: REPMGR_CONNECT_TIMEOUT
              value: "30"
            - name: REPMGR_RECONNECT_ATTEMPTS
              value: "5"
            - name: REPMGR_RECONNECT_INTERVAL
              value: "5"
            - name: REPMGR_USERNAME
              value: repmgr
            - name: REPMGR_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: repmgr-password
                  name: metrics-postgresql-password
            - name: REPMGR_DATABASE
              value: repmgr
            - name: POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS
              value: "2"
            - name: POSTGRESQL_ENABLE_TLS
              value: "yes"
            - name: POSTGRESQL_TLS_KEY_FILE
              value: /certs/tls.key
            - name: POSTGRESQL_TLS_CERT_FILE
              value: /certs/tls.crt
          image: harbor.cmp.be.atos.net/napp-3-2/clustering/third-party/postgresql-repmgr:20138956
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /pre-stop.sh
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "postgres" -d "postgres"  -h
                  127.0.0.1 -c "SELECT 1"
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: postgresql
          ports:
            - containerPort: 5432
              name: postgresql
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "postgres" -d "postgres"  -h
                  127.0.0.1 -c "SELECT 1"
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /build/repmgr/conf
              name: postgresql-config
            - mountPath: /docker-entrypoint-initdb.d/
              name: custom-init-scripts
            - mountPath: /bitnami/postgresql
              name: data
            - mountPath: /pre-stop.sh
              name: hooks-scripts
              subPath: pre-stop.sh
            - mountPath: /certs
              name: postgres-certs
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccount: metrics-postgresql-ha-postgresql
      serviceAccountName: metrics-postgresql-ha-postgresql
      terminationGracePeriodSeconds: 30
      volumes:
        - name: postgres-certs
          projected:
            defaultMode: 420
            sources:
              - secret:
                  items:
                    - key: tls.key
                      mode: 384
                      path: tls.key
                    - key: tls.crt
                      mode: 384
                      path: tls.crt
                  name: metrics-postgresql-ha-postgresql-tls-cert
        - configMap:
            defaultMode: 493
            name: metrics-postgresql-ha-postgresql-hooks-scripts
          name: hooks-scripts
        - configMap:
            defaultMode: 420
            name: metrics-postgresql-ha-postgresql-configuration
          name: postgresql-config
        - configMap:
            defaultMode: 420
            name: metrics-create-db-script-configmap
          name: custom-init-scripts
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: nsx-t-napp-datastores
        volumeMode: Filesystem
